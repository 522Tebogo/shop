<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.work.work.mapper.GoodMapper">

    <select id="getRandomGoods" resultType="com.work.work.entity.Goods">
        SELECT id, name, NormalPrice, SurprisePrice, imageUrl, description, category FROM Goods WHERE is_out=0 ORDER BY RAND() LIMIT 4;
    </select>
    <select id="getGoodById" resultType="com.work.work.entity.Goods">
        SELECT id, name, NormalPrice, SurprisePrice, imageUrl, description, category FROM Goods WHERE id = #{goodid}
    </select>

    <!-- 假设 getAllGoods 和 getGoodsByCategory 也应该从 Goods 表查询 -->
    <select id="getAllGoods" resultType="com.work.work.entity.Goods">
        SELECT * FROM Goods
    </select>
    <select id="getActiveGoods" resultType="com.work.work.entity.Goods">
        SELECT * FROM Goods WHERE is_out = 0
    </select>
    <select id="getGoodsByCategory" resultType="com.work.work.entity.Goods">
        SELECT id, name, NormalPrice, SurprisePrice, imageUrl, description, category FROM Goods WHERE category = #{category} AND is_out=0
    </select>

    <!-- 获取总记录数 -->
    <!-- 注意：如果这个 count 是用于后台商品管理列表（可能包含截图 Goods 表之外的字段），
         那么它查询的表 wn_goods 可能与前台展示的 Goods 表不同。
         如果前后台商品数据源一致，都应是 Goods 表。
         这里我暂时保持 wn_goods，但您需要确认。
         如果 count 也是针对截图的 Goods 表，应改为：
         SELECT COUNT(*) FROM Goods WHERE name LIKE CONCAT('%',#{word},'%')
    -->
    <select id="count" resultType="long">
        SELECT COUNT(*) FROM wn_goods where name LIKE CONCAT('%',#{word},'%')
    </select>

    <!--
        根据方案B，我们将插入到截图中的 Goods 表，并使用其列。
        Goods 表目前只有: id, name, NormalPrice, SurprisePrice, imageUrl, description, category
    -->
    <insert id="insertGoods" parameterType="com.work.work.entity.Goods" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO Goods (name, NormalPrice, SurprisePrice, imageUrl, description, category,is_out)
        VALUES (#{name}, #{normalPrice}, #{surprisePrice}, #{imageUrl}, #{description}, #{category},0)
        <!--
            注意:
            1. Goods 实体类中的字段名 NormalPrice, SurprisePrice (首字母大写)
               对应 MyBatis 中的 #{normalPrice}, #{surprisePrice} (Lombok 生成的getter/setter是 getNormalPrice, 所以属性是 normalPrice)
               请确保 Goods 实体类中这些字段的 getter/setter 行为符合预期，或者直接使用小写字段名。
               为了安全，建议 Goods 实体中价格字段也用小写开头: private int normalPrice; private int surprisePrice;

            2. 其他字段如 no, stock, marketPrice, salePrice, image (如果不同于imageUrl), hottest, newest, saleTime
               在截图的 Goods 表中不存在。如果需要这些字段，必须先在 Goods 表中添加对应的列。
               或者，如果这些字段是用于另一个表（如 wn_goods），那么您需要一个不同的 insert 语句。
               当前这个 insert 语句只针对 Goods 表的现有列。
        -->
    </insert>
    <update id="deleteGoodsById">
        UPDATE goods
        SET is_out = CASE WHEN is_out = 1 THEN 0 ELSE 1 END
        WHERE id = #{id};

    </update>
    <select id="getCountById">
        SELECT stock FROM goods WHERE id = #{goodid}
    </select>
    <update id="plusCount">
        UPDATE goods SET stock = stock+ #{num} WHERE id = #{goodid}
    </update>
    <update id="minusCount">
        UPDATE goods SET stock = stock - #{num} WHERE id = #{goodid}
    </update>
    <update id="changeCount">
        UPDATE goods
        SET stock = stock + #{num}
        WHERE id = #{goodid}
          AND (#{num} >= 0 OR stock + #{num} >= 0);
    </update>

    <select id="getCountByDoubleId">
        SELECT num FROM wn_caritem WHERE userid  = #{userId} AND goodid= #{goodId} AND code IS NULL
    </select>
    <select id="getCountByTripleId">
        SELECT num FROM wn_caritem WHERE userid  = #{userId} AND goodid= #{goodId} AND code = #{orderCode}
    </select>

    <select id="getOutByGoodId">
        SELECT is_out FROM goods WHERE id = #{goodid}
    </select>

</mapper>