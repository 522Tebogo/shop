# =============================================
# Application Configuration
# =============================================
server:
  # Railway会自动注入PORT环境变量，Spring Boot会优先使用它
  # 8080是本地开发时的备用端口
  port: ${PORT:8080}
  servlet:
    context-path: /

myapp:
  upload-dir:
    # 警告：Railway的文件系统是临时的，重启后文件会丢失
    # 建议使用云存储(如S3)或Railway的Volume来持久化存储文件
    avatars: ./uploads/avatars

spring:
  data:
    redis:
      # 使用Railway提供的Redis环境变量
      host: ${REDISHOST}
      port: ${REDISPORT}
      password: ${REDISPASSWORD} # Railway的Redis服务通常需要密码
      database: 0
      timeout: 10000
      lettuce:
        pool:
          max-active: 8
          max-wait: -1
          max-idle: 8
          min-idle: 0

  application:
    name: invoice

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    # 使用Railway提供的MySQL环境变量
    url: jdbc:mysql://${MYSQLHOST}:${MYSQLPORT}/${MYSQLDATABASE}?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&useSSL=false
    username: ${MYSQLUSER}
    password: ${MYSQLPASSWORD}

  mvc:
    # 注意：JSP需要特定的打包和服务器配置，在Railway上使用默认的jar包部署可能无法工作
    # 推荐使用Thymeleaf或构建纯API后端 + 前端分离的模式
    view:
      prefix: /WEB-INF/pages/
      suffix: .jsp
      order: 1

  web:
    resources:
      static-locations:
        - classpath:/META-INF/resources/
        - classpath:/resources/
        - classpath:/static/
        - classpath:/public/

# mybatis
mybatis:
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.work.work.entity
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl